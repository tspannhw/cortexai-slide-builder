[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "snowflake-cortex-slide-builder"
version = "1.0.0"
description = "Interactive Streamlit application that uses Snowflake Cortex AI SQL to generate professional slide decks from semantic views"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Snowflake Cortex Team", email = "cortex-team@example.com"}
]
maintainers = [
    {name = "Snowflake Cortex Team", email = "cortex-team@example.com"}
]
keywords = [
    "snowflake",
    "cortex",
    "ai",
    "sql",
    "streamlit",
    "slides",
    "presentation",
    "data-visualization",
    "semantic-model"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Scientists",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Database :: Database Engines/Servers",
]
requires-python = ">=3.8"
dependencies = [
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "plotly>=5.15.0",
    "snowflake-connector-python>=3.0.0",
    "snowflake-snowpark-python>=1.8.0",
    "requests>=2.31.0",
    "python-pptx>=0.6.21",
    "reportlab>=4.0.0",
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    "altair>=5.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "coverage>=7.3.0",
    "httpx>=0.24.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "hatchling>=1.18.0",
]
all = [
    "snowflake-cortex-slide-builder[dev,test,docs,build]"
]

[project.urls]
Homepage = "https://github.com/snowflake/cortex-slide-builder"
Documentation = "https://cortex-slide-builder.readthedocs.io/"
Repository = "https://github.com/snowflake/cortex-slide-builder.git"
"Bug Tracker" = "https://github.com/snowflake/cortex-slide-builder/issues"
Changelog = "https://github.com/snowflake/cortex-slide-builder/blob/main/CHANGELOG.md"

[project.scripts]
cortex-slides = "snowflake_cortex_slide_builder.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/snowflake_cortex_slide_builder"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/snowflake_cortex_slide_builder",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "snowflake: Tests requiring Snowflake connection",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["snowflake_cortex_slide_builder"]
known_third_party = ["streamlit", "pandas", "plotly", "snowflake"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*", 
    "snowflake.*",
    "reportlab.*",
    "pptx.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
